---
# tasks file for docker

-
  name: 'Install Docker from APT'
  become: true
  block:
    - name: 'Docker apt-key'
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        keyring: /etc/apt/trusted.gpg.d/docker.gpg

    - name: 'Docker apt-repo'
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: 'Update APT packages'
      ansible.builtin.apt:
        update_cache: true

    - name: 'Ensure docker installed'
      ansible.builtin.package:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present

    - name: Render docker daemon config to temp file.
      ansible.builtin.template:
        src: "templates/daemon.json.j2"
        dest: /tmp/daemon.json
        owner: root
        group: root
        mode: '0770'

    - name: 'Stat new template'
      ansible.builtin.stat:
        path: /tmp/daemon.json
        checksum_algorithm: sha256
      register: new

    - name: 'Stat existing template'
      ansible.builtin.stat:
        path: /etc/docker/daemon.json
        checksum_algorithm: sha256
      register: existing

    - name: 'Copy new daemon.json to /etc/docker/'
      ansible.builtin.copy:
        remote_src: true
        src: /tmp/daemon.json
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: '0770'
      when: not existing.stat.exists or new.stat.checksum != existing.stat.checksum

    - name: 'Restart service docker - with daemon reload.'
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: docker
      when: not existing.stat.exists or new.stat.checksum != existing.stat.checksum
